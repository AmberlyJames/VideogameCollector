package videogame.collector.service;

import java.util.LinkedList;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.Objects;
import java.util.Optional;
import java.util.Set;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DuplicateKeyException;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import videogame.collector.controller.model.ConsoleData;
import videogame.collector.controller.model.GenreData;
import videogame.collector.controller.model.StudioData;
import videogame.collector.controller.model.VideogameData;
import videogame.collector.dao.ConsoleDao;
import videogame.collector.dao.StudioDao;
import videogame.collector.dao.VideogameDao;
import videogame.collector.dao.GenreDao;
import videogame.collector.entity.Console;
import videogame.collector.entity.Genre;
import videogame.collector.entity.Studio;
import videogame.collector.entity.Videogame;

@Service
public class VideogameService {
	@Autowired
	private VideogameDao videogameDao;

	@Autowired
	private StudioDao studioDao;

	@Autowired
	private ConsoleDao consoleDao;

	@Autowired
	private GenreDao genreDao;

//******************************Studio Entity Methods******************************************************
	@Transactional(readOnly = false)
	public StudioData saveStudio(StudioData studioData) {
		Long studioId = studioData.getStudioId();
		Studio studio = findOrCreateStudio(studioId, studioData.getStudioEmail());
		setFieldsInStudio(studio, studioData);
	
		return new StudioData(studioDao.save(studio));
	}

	private void setFieldsInStudio(Studio studio, StudioData studioData) {
		
		studio.setStudioName(studioData.getStudioName());
		studio.setStudioEmail(studioData.getStudioEmail());
	}

	private Studio findOrCreateStudio(Long studioId, String studioEmail) {
		Studio studio;
		if (Objects.isNull(studioId)) {
			
			Optional<Studio> opStudio = studioDao.findByStudioEmail(studioEmail);
			
			if (opStudio.isPresent()) {
				throw new DuplicateKeyException("Studio with email " + studioEmail + " already exists.");
			}
			
			studio = new Studio();
		} else {
			studio = findStudioById(studioId);
		}
		return studio;
	}

	private Studio findStudioById(Long studioId) {
		return studioDao.findById(studioId)
				.orElseThrow(() -> new NoSuchElementException("Studio with ID=" + studioId + " was not found."));
	}
	
	@Transactional(readOnly = true)
	public StudioData retrieveStudioById(Long studioId) {
		Studio studio = findStudioById(studioId);
		return new StudioData(studio);	
	}
	
	@Transactional(readOnly = true)
	public List<StudioData> retrieveAllStudios() {
		List<Studio> studios = studioDao.findAll();
		List<StudioData> response = new LinkedList<>();
		
		for (Studio studio : studios) {
			response.add(new StudioData(studio));
		}
		return response;
	}
	
//*****************************************Console Entity Methods***********************************************************************
	@Transactional(readOnly = false)
	public ConsoleData saveConsole(ConsoleData consoleData) {
		Long consoleId = consoleData.getConsoleId();
		Console console = findOrCreateConsole(consoleId);

		setFieldsinConsole(console, consoleData);
		return new ConsoleData(consoleDao.save(console));
	}

	private void setFieldsinConsole(Console console, ConsoleData consoleData) {
		console.setConsoleName(consoleData.getConsoleName());
	}

	private Console findOrCreateConsole(Long consoleId) {
		Console console;

		if (Objects.isNull(consoleId)) {
			console = new Console();
		} else {
			console = findConsoleById(consoleId);
		}
		return console;
	}

	private Console findConsoleById(Long consoleId) {
		return consoleDao.findById(consoleId)
				.orElseThrow(() -> new NoSuchElementException("Console with ID=" + consoleId + " was no found."));
	}
	@Transactional(readOnly = true)
	public List<ConsoleData> retrieveAllConsoles() {
		List<Console> consoles = consoleDao.findAll();
		List<ConsoleData> response = new LinkedList<>();
		
		for (Console console : consoles) {
			response.add(new ConsoleData(console));
		}
		return response;
		
	}
//**************************************Genre Entity Methods*******************************************************************************
	@Transactional(readOnly = false)
	public GenreData saveGenre(GenreData genreData) {
		Long genreId = genreData.getGenreId();
		Genre genre = findOrCreateGenre(genreId);
		setFieldsInGenre(genre, genreData);
		return new GenreData(genreDao.save(genre));
	}

	private void setFieldsInGenre(Genre genre, GenreData genreData) {
		genre.setGenreName(genreData.getGenreName());
	}

	private Genre findOrCreateGenre(Long genreId) {
		Genre genre;
		if (Objects.isNull(genreId)) {
			genre = new Genre();
		} else {
			genre = findGenreById(genreId);
		}
		return genre;
	}

	private Genre findGenreById(Long genreId) {
		return genreDao.findById(genreId)
				.orElseThrow(() -> new NoSuchElementException("Genre with ID=" + genreId + "was not found."));
	}
	@Transactional(readOnly = true)
	public List<GenreData> retrieveAllGenres() {
		List<Genre> genres = genreDao.findAll();
		List<GenreData> response = new LinkedList<>();
		
		for (Genre genre : genres) {
			response.add(new GenreData(genre));
		}
		return response;
	}
	
//****************************************Videogame Entity Methods********************************************************************************
	@Transactional(readOnly = false)
	public VideogameData saveVideoGame(Long studioId, VideogameData videogameData) {
		
		Studio studio = findStudioById(studioId);
		
		Set<Console> consoles = consoleDao.findAllByConsoleIdIn(videogameData.getConsoles());
		
		Set<Genre> genres = genreDao.findAllByGenreIdIn(videogameData.getGenres());
		
		Videogame videogame = findOrCreateVideogame(videogameData.getVideogameId());
		
		setFieldsInVideogame(videogame, videogameData);
		
		videogame.setGameStudioId(studio);
		studio.getVideogames().add(videogame);
		
		for(Console console : consoles) {
			console.getVideogames().add(videogame);
			videogame.getConsoles().add(console);
		}
		for(Genre genre : genres) {
			genre.getVideogames().add(videogame);
			videogame.getGenres().add(genre);
		}
		Videogame dbVideogame = videogameDao.save(videogame);
		
		
		return new VideogameData(dbVideogame);
	}

	private void setFieldsInVideogame(Videogame videogame, VideogameData videogameData) {
		videogame.setVideogameName(videogameData.getVideogameName());
		
	}

	private Videogame findOrCreateVideogame(Long videogameId) {
		Videogame videogame;
		if (Objects.isNull(videogameId)) {
			videogame = new Videogame();
		} else {
			videogame = findVideogameById(videogameId);
		}
		return videogame;
	}

	private Videogame findVideogameById(Long videogameId) {
		return videogameDao.findById(videogameId)
				.orElseThrow(() -> new NoSuchElementException("Videogame with ID=" + videogameId + "was not found."));
	}
	@Transactional(readOnly = true)
	public List<VideogameData> retrieveAllVideogamesInStudio(Long studioId) {
		Studio studio = findStudioById(studioId);
//		List<Videogame> videogames = videogameDao.findAll();
		List<VideogameData> response = new LinkedList<>();
		
		for(Videogame videogame : studio.getVideogames()) {
			
			response.add(new VideogameData(videogame));
			
		}
		return response;
	}
	@Transactional(readOnly = true)
	public VideogameData retrieveVideogameById(Long videogameId) {
		Videogame videogame = findVideogameById(videogameId);
		return new VideogameData(videogame);
	}
	
	@Transactional(readOnly = false)
	public void deleteVideogameById(Long videogameId) {
		Videogame videogame = findVideogameById(videogameId);
		videogameDao.delete(videogame);
	}



	
	


}
